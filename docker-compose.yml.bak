services:
  # Frontend application (existing Next.js app)
  app:
    build:
      context: ./app
      dockerfile: Dockerfile.prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_SUPABASE_URL=http://localhost:54321
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-your-anon-key}
    networks:
      - chatree-network
    depends_on:
      - supabase
    restart: unless-stopped
  supabase:
    image: supabase/supabase-dev
    ports:
      - "54321:8000"  # API Gateway
      - "54322:5432"  # Database
      - "54323:9000"  # Studio
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - JWT_SECRET=super-secret-jwt-token-with-at-least-32-characters-long
      - ANON_KEY=${SUPABASE_ANON_KEY}
      - SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - STUDIO_PORT=9000
      - API_EXTERNAL_URL=http://localhost:54321
      - ENABLE_VECTOR_STORE=true
      - SUPABASE_URL=http://localhost:54321
      # Corregimos la conexión a la base de datos
      - POSTGRES_HOST=supabase-db
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PORT=5432
      # Agregar hostname explícito para conexiones internas
      - DB_HOST=supabase-db
      - DB_URL=postgresql://postgres:${POSTGRES_PASSWORD}@supabase-db:5432/postgres
      # Configuración CORS para permitir solicitudes desde el frontend
      - ADDITIONAL_REDIRECT_URLS=http://localhost:3000,http://localhost:3000/auth/callback
      - SITE_URL=http://localhost:3000
      # Configuración CORS más permisiva para desarrollo
      - KONG_CORS_ORIGINS=*
      - KONG_CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS,PATCH
      - KONG_CORS_HEADERS=Accept,Accept-Language,Content-Language,Content-Type,Authorization,X-Client-Info,apikey,X-Requested-With
      - KONG_CORS_CREDENTIALS=true
      - KONG_CORS_MAX_AGE=86400
      # Configuración explícita para Kong
      - KONG_GW_CORS_ORIGINS=*
      - KONG_GW_CORS_METHODS=GET,POST,PUT,DELETE,OPTIONS,PATCH
      - KONG_GW_CORS_HEADERS=Accept,Accept-Language,Content-Language,Content-Type,Authorization,X-Client-Info,apikey,X-Requested-With
      - KONG_GW_CORS_CREDENTIALS=true
      - KONG_GW_CORS_MAX_AGE=86400
      - GITHUB_CLIENT_ID=${GITHUB_CLIENT_ID}
      - GITHUB_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
    volumes:
      - supabase-data:/var/lib/postgresql/data
      - ./Server/supabase/migrations:/supabase/migrations
      - ./Server/supabase/seed.sql:/docker-entrypoint-initdb.d/seed.sql
      - ./Server/supabase/config.toml:/root/.config/supabase/config.toml
      - ./Server/supabase/kong.yml:/etc/kong/kong.yml
    networks:
      - chatree-network
    depends_on:
      - supabase-db

  # Agregar un servicio PostgreSQL separado
  supabase-db:
    image: postgres:15
    ports:
      - "5433:5432"  # Puerto externo diferente para evitar conflictos
    env_file:
      - ./.env
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    command: postgres -c wal_level=logical -c max_replication_slots=5 -c max_wal_senders=10
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - chatree-network

  # Ollama for LLM hosting
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    env_file:
      - ./.env
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - chatree-network

  # LangChain API server
  langchain-server:
    build:
      context: ./Server/langchain
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - ./.env
    volumes:
      - ./Server/langchain:/app
    depends_on:
      - supabase
      - ollama
      - redis
    environment:
      - SUPABASE_URL=http://supabase:8000
      - SUPABASE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - OLLAMA_BASE_URL=http://ollama:11434
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    networks:
      - chatree-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    env_file:
      - ./.env
    volumes:
      - redis-data:/data
    command: redis-server --requirepass ${REDIS_PASSWORD}
    networks:
      - chatree-network

  # Redis Commander (UI for Redis)
  redis-commander:
    image: rediscommander/redis-commander:latest
    env_file:
      - ./.env
    environment:
      - REDIS_HOSTS=local:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - "8081:8081"
    networks:
      - chatree-network
    depends_on:
      - redis

networks:
  chatree-network:
    driver: bridge

volumes:
  supabase-data:
  postgres-data:
  redis-data:
  ollama-data:
